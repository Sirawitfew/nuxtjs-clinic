
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model patients {
  id          Int      @id @default(autoincrement())
  title       String
  firstname   String
  lastname    String
  age         Int
  weight      Float
  height      Float
  blood_type  String
  congenital  String
  allergy     String
  birthdate   DateTime //วันเกิด 
  houseNumber Int // บ้านเลขที่ 
  village     Int // หมู่ 
  subdistrict String
  district    String
  province    String
  postalCode  Int // เลขไปรษณีย์ 
  phoneNumber String // เบอร์โทรศัพท์ 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patientHistories PatientHistory[]
  diagnoses        Diagnosis[]
}

// ซักประวัติ // ตรวจรักษา
model PatientHistory {
  id             Int      @id @default(autoincrement())
  patientId      Int
  physicianId    Int?
  weight         Float
  height         Float
  temperature    Float
  bloodPressure  Float
  pulse          Float
  respiration    Float
  chiefComplaint String
  symptoms       String
  physicalExam   String
  status         String   @default("close")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  patient patients @relation(fields: [patientId], references: [id])
  diagnoses      Diagnosis[]
}


model Physician {
  id         Int      @id @default(autoincrement())
  title      String
  first_name String
  last_name  String
  about      String?
  email      String   @unique
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  diagnoses Diagnosis[] 
}

model Diagnosis {
  id             Int      @id @default(autoincrement())
  patient_id     Int
  createdAt      DateTime @default(now())
  patientHistoryId Int?
  updatedAt      DateTime @updatedAt
  diagnosis      String
  treatment_plan String?
  notes          String?
  physician_id   Int

  patient   patients  @relation(fields: [patient_id], references: [id])
  physician Physician @relation(fields: [physician_id], references: [id])
  patientHistory PatientHistory? @relation(fields: [patientHistoryId], references: [id])
  payments         Payment[]
}

model Products {
  id             Int      @id @default(autoincrement())
  name        String
  imageUrl    String
  about       String
  price       Int
  quantity    Int
  remainQuantity    Int
  status      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  promotions Promotion[]
}

model Promotion {
  id        Int     @id @default(autoincrement())
  productId   Int
  name      String
  imageUrl    String
  price     Int
  startDate   DateTime
  endDate     DateTime
  status         String   @default("active")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  products  Products @relation(fields: [productId], references: [id])
}

model Drug {
  id          Int      @id @default(autoincrement())
  name        String   // ชื่อยา
  type        String   // ประเภทของยา (เช่น ยาฆ่าเชื้อ, ยาแก้ปวด)
  price       Int      // ราคา
  dosage      Float?   // ปริมาณยา (อาจเป็นค่า null ได้)
  imageUrl    String   // URL ของภาพยา
  unit        String?  // หน่วยของปริมาณ (เช่น mg, ml)
  about       String   // ข้อมูลเกี่ยวกับยา
  status      String   // สถานะ (เช่น active, inactive)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id             Int      @id @default(autoincrement())
  orderNumber    String
  totalAmount    Int
  quantity       Int?
  paymentMethod  String?  
  status         String   @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  diagnosisId    Int?
  diagnosis      Diagnosis? @relation(fields: [diagnosisId], references: [id])
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  firstname       String?
  lastname    String?
  role        String   @default("user")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // สร้างความสัมพันธ์กับ Address
  addresses    Address[]
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  country     String   // ประเทศ
  houseNumber Int // บ้านเลขที่ 
  village     Int // หมู่ 
  subdistrict String
  district    String
  province    String
  postalCode  Int // เลขไปรษณีย์ 
  phoneNumber String // เบอร์โทรศัพท์ 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // สร้างความสัมพันธ์กับโมเดล User
  user        User     @relation(fields: [userId], references: [id])
}
